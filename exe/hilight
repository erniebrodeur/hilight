#!/usr/bin/env ruby

require "hilight"
require 'term/ansicolor'
require 'open3'
require 'optparse'

include Hilight #rubocop:disable all

def split_opts(array)
  cmd_start_index = array.find_index { |e| !e.start_with? "-" }
  return [[], array] if !cmd_start_index || cmd_start_index.zero?

  [array[0..cmd_start_index - 1], array[cmd_start_index..-1]]
end

Hilight::Filter = Struct.new(:cmd, :patterns)
Hilight::Filter.define_method(:match?) do |string|
  case cmd
  when (String || Symbol) then (cmd.to_s == string.to_s)
  when Regexp then (cmd.match? string.to_s)
  else false
  end
end

Hilight::Filters = Struct.new(:collection)
Hilight::Filters.define_method(:find) do |match|
  collection.find { |f| f.match? match } || collection.find { |e| e.cmd == 'default' }
end

rspec = [
  /(?<green>\d+) examples, (?<red>\d+) failures?, (?<yellow>\d+) pending/,
  /(?<blue>\d+\.\d+)/,
  /\"(?<green>.*?)\"|\'(?<green>.*?)\'/,
  /# (?<red>.*):(?<yellow>\d+)/
]

help = [/(?<yellow>\B-{1,2}[\w-]+)|(?<blue>[\[\]\(\)\{\}\<\>])|(?<green>["'].*?["'])/]
git = [/(?<green>'.*?')|(?<blue>".*?")/]
ruby = [/(.*from |)(?<red>.*):(?<blue>\d+)(?::in )(?<yellow>`.*')/]
default = [/(?<green>\d+\.\d+)|(?<blue>".*")/]

filters = Filters[[
  Filter["rspec", rspec],
  Filter[/-h|--help|help/, help],
  Filter["git", git],
  Filter["ruby", ruby],
  Filter["default", default]
]]

# Hilight::Filters.define_method(:streaming_exec) do |cmd|
#   Open3.popen3(cmd) do |_stdin, stdout, _stderr, thr|
#     loop do
#       sleep 0.001
#       $stdout << transform(stdout.readpartial(stdout.nread))
#       break unless thr.alive?
#     end
#   end
# end

Hilight::Filters.define_method(:exec) do |string|
  f = find string
  output, process = Open3.capture2e(string)
  print Hilight.transform output, f[1]
  exit process.exitstatus
end

options = {}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: hilight <cmd>"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
end

arguments, cmd = split_opts ARGV
parser.parse arguments

if cmd.any?
  filters.exec cmd.join(' ')
else
  $stdout << default.transform($stdin.readline) until $stdin.eof?
end
