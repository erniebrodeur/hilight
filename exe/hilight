#!/usr/bin/env ruby

require "hilight"
require 'open3'
require 'optparse'

include Hilight #rubocop:disable all

### Fabrics
rspec = Fabric['rspec', [
  /(?<green>\d+) examples, (?<red>\d+) failures?, (?<yellow>\d+) pending/,
  /(?<blue>\d+\.\d+)/,
  /\"(?<green>.*?)\"|\'(?<green>.*?)\'/,
  /# (?<red>.*):(?<yellow>\d+)/
]]
help = Fabric[/-h|--help|help/, /(?<yellow>\B-{1,2}[\w-]+)|(?<blue>[\[\]\(\)\{\}\<\>])|(?<green>["'].*?["'])/]
git = Fabric["git", /(?<green>'.*?')|(?<blue>".*?")/]
ruby = Fabric['ruby', /(.*from |)(?<red>.*):(?<blue>\d+)(?::in )(?<yellow>`.*')/]
default = Fabric['default', /(?<green>\d+\.\d+)|(?<blue>".*")/]
fabrics = [rspec, git, ruby, help, default]

### Parsing
options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: hilight <cmd>"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
end

def split_opts(array)
  cmd_start_index = array.find_index { |e| !e.start_with? "-" }
  return [[], array] if !cmd_start_index || cmd_start_index.zero?

  [array[0..cmd_start_index - 1], array[cmd_start_index..-1]]
end

arguments, cmd = split_opts ARGV
parser.parse arguments

### Execution
if cmd.any?
  cmd_string = cmd.join(' ')

  fabric = fabrics.find { |f| f.match? cmd_string }
  fabric ||= default

  output, process = Open3.capture2e(cmd_string)
  print fabric.transform output

  exit process.exitstatus
else
  $stdout << default.transform($stdin.readline) until $stdin.eof?
end
